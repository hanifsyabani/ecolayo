generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Store {
  id          String  @id @default(uuid())
  store_name  String  @default("EcoLayo")
  logo        String?
  address     String?
  phone       String?
  city        String?
  email_store String?
}

model User {
  id               String             @id @default(uuid())
  username         String?
  firstName        String?
  lastName         String?
  email            String             @unique
  phone            String?
  password         String
  role             String             @default("user")
  status           String             @default("active")
  gender           String             @default("male")
  imageUrl         String?
  cart             Cart?              @relation("UserToCart")
  Checkout         Checkout[]         @relation("UserToCheckout")
  LikedProduct     LikedProduct[]     @relation("UserToLikedProduct")
  ShipppingAddress ShipppingAddress[] @relation("UserToShippingAddress")
  ContactMessage   ContactMessage[]   @relation("UserToContactMessage")

  address   String?
  lastLogin DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)
}

model Banner {
  id             String   @id @default(uuid())
  label          String
  imageUrl       String
  categoryBanner String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  isDeleted      Boolean  @default(false)
}

model Category {
  id       String    @id @default(uuid())
  name     String
  product  Product[] @relation("CategoryToProduct")
  imageUrl String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)
}

model Product {
  id               String         @id @default(uuid())
  categoryid       String
  category         Category       @relation("CategoryToProduct", fields: [categoryid], references: [id], onDelete: Cascade)
  name             String
  price            Decimal
  description      String?
  shortDescription String?
  tag              Tag[]          @relation("ProductToTag")
  isFeatured       Boolean        @default(false)
  isArchived       Boolean        @default(false)
  stars            Float          @default(0.0)
  stock            Int?           @default(0)
  images           Images[]       @relation("ProductToImages")
  cartItems        CartItem[]     @relation("ProductToCartItem")
  LikedProduct     LikedProduct[] @relation("ProductToLikedProduct")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)

  @@index([categoryid])
}

model LikedProduct {
  id        String  @id @default(uuid())
  user      User    @relation("UserToLikedProduct", fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  product   Product @relation("ProductToLikedProduct", fields: [productId], references: [id], onDelete: Cascade)
  productId String

  @@index([userId, productId])
}

model Tag {
  id      String    @id @default(uuid())
  name    String    @unique
  product Product[] @relation("ProductToTag")
}

model Images {
  id        String  @unique @default(uuid())
  productid String
  product   Product @relation("ProductToImages", fields: [productid], references: [id], onDelete: Cascade)
  url       String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productid])
}

model Cart {
  id        String     @id @default(uuid())
  userId    String?    @unique
  user      User?      @relation("UserToCart", fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String  @id @default(uuid())
  cartId    String?
  cart      Cart?   @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation("ProductToCartItem", fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int     @default(1)

  Checkout   Checkout? @relation(fields: [checkoutId], references: [id])
  checkoutId String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@unique([cartId, productId])
  @@index([productId])
}

model Checkout {
  id                String           @id @default(uuid())
  userId            String?
  user              User?            @relation("UserToCheckout", fields: [userId], references: [id], onDelete: Cascade)
  items             CartItem[]
  subtotal          Int
  finalTotal        Int
  tax               Int
  shipping          Int?
  shippingAddressId String
  shippingAddress   ShipppingAddress @relation(fields: [shippingAddressId], references: [id], onDelete: Cascade)

  orderNotes    String
  paymentMethod String
  status        String @default("placed")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ShipppingAddress {
  id            String     @id @default(uuid())
  userId        String     @unique
  user          User       @relation("UserToShippingAddress", fields: [userId], references: [id], onDelete: Cascade)
  firstName     String
  lastName      String
  companyName   String?
  streetAddress String
  province      String
  kabupaten     String
  kecamatan     String
  kelurahan     String
  postalCode    String
  email         String
  phone         String
  Checkout      Checkout[]
}

model Payment {
  id     String @id @default(uuid())
  method String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ContactMessage {
  id      String @id @default(uuid())
  userId  String 
  user    User   @relation("UserToContactMessage", fields: [userId], references: [id], onDelete: Cascade)
  email   String
  subject String
  message String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
