generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Store {
  id          String  @id @default(uuid())
  store_name  String  @default("EcoLayo")
  logo        String?
  address     String?
  phone       String?
  city        String?
  email_store String?
}

model User {
  id               String            @id @default(uuid())
  username         String?
  firstName        String?
  lastName         String?
  email            String            @unique
  phone            String?
  password         String
  role             String            @default("user")
  status           String            @default("active")
  gender           String            @default("male")
  imageUrl         String?
  cart             Cart?             @relation("UserToCart")
  Order            Order[]           @relation("UserToCheckout")
  LikedProduct     LikedProduct[]    @relation("UserToLikedProduct")
  ShipppingAddress ShippingAddress[] @relation("UserToShippingAddress")
  ContactMessage   ContactMessage[]  @relation("UserToContactMessage")
  ProducrReview    ProductReview[]   @relation("UserToReview")

  address   String?
  lastLogin DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)
}

model Banner {
  id             String   @id @default(uuid())
  label          String
  imageUrl       String
  categoryBanner String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  isDeleted      Boolean  @default(false)
}

model Category {
  id       String    @id @default(uuid())
  name     String
  product  Product[] @relation("CategoryToProduct")
  imageUrl String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)
}

model Product {
  id                String          @id @default(uuid())
  categoryid        String
  category          Category        @relation("CategoryToProduct", fields: [categoryid], references: [id], onDelete: Cascade)
  name              String
  price             Decimal
  description       String?
  totalCheckout     Int             @default(0)
  totalQuantitySold Int             @default(0)
  shortDescription  String?
  tag               Tag[]           @relation("ProductToTag")
  isFeatured        Boolean         @default(false)
  isArchived        Boolean         @default(false)
  stars             Float           @default(0.0)
  stock             Int?            @default(0)
  images            Images[]        @relation("ProductToImages")
  cartItems         CartItem[]      @relation("ProductToCartItem")
  LikedProduct      LikedProduct[]  @relation("ProductToLikedProduct")
  OrderItem         OrderItem[]     @relation("ProductToCheckoutItem")
  ProductReview     ProductReview[] @relation("ProductToReview")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)

  @@index([categoryid])
}

model ProductReview {
  id              String  @id @default(uuid())
  productId       String
  product         Product @relation("ProductToReview", fields: [productId], references: [id], onDelete: Cascade)
  userId          String
  user            User    @relation("UserToReview", fields: [userId], references: [id], onDelete: Cascade)
  content         String
  photoProof      String?
  ratingProduct   Int     @default(0)
  shopRating      Int     @default(0)
  courierRating   Int     @default(0)
  courierService  Int     @default(0)
  displayUsername Boolean @default(true)
  orderId         String
  Order           Order   @relation(fields: [orderId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)

  @@index([userId])
  @@index([productId])
}

model LikedProduct {
  id        String  @id @default(uuid())
  user      User    @relation("UserToLikedProduct", fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  product   Product @relation("ProductToLikedProduct", fields: [productId], references: [id], onDelete: Cascade)
  productId String

  @@index([userId])
  @@index([productId])
}

model Tag {
  id      String    @id @default(uuid())
  name    String    @unique
  product Product[] @relation("ProductToTag")
}

model Images {
  id        String  @unique @default(uuid())
  productid String
  product   Product @relation("ProductToImages", fields: [productid], references: [id], onDelete: Cascade)
  url       String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productid])
}

model Cart {
  id        String     @id @default(uuid())
  userId    String?    @unique
  user      User?      @relation("UserToCart", fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@index([userId])
}

model CartItem {
  id        String  @id @default(uuid())
  cartId    String?
  cart      Cart?   @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation("ProductToCartItem", fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int     @default(1)

  Order      Order?   @relation(fields: [checkoutId], references: [id])
  checkoutId String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([cartId, productId])
  @@index([productId])
}

model Order {
  id                String          @id @default(uuid())
  userId            String?
  user              User?           @relation("UserToCheckout", fields: [userId], references: [id], onDelete: Cascade)
  items             OrderItem[]
  subtotal          Int
  finalTotal        Int
  tax               Int
  shipping          Int?
  shippingAddressId String
  shippingAddress   ShippingAddress @relation(fields: [shippingAddressId], references: [id], onDelete: Cascade)
  CartItem          CartItem[]
  orderNotes        String
  noteFromShop      String?
  paymentMethod     String
  status            String          @default("placed")
  ProductReview     ProductReview[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation("ProductToCheckoutItem", fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([orderId])
  @@index([productId])
}

model ShippingAddress {
  id            String  @id @default(uuid())
  userId        String  @unique
  user          User    @relation("UserToShippingAddress", fields: [userId], references: [id], onDelete: Cascade)
  firstName     String
  lastName      String
  companyName   String?
  streetAddress String
  province      String
  kabupaten     String
  kecamatan     String
  kelurahan     String
  postalCode    String
  email         String
  phone         String
  Order         Order[]
}

model Payment {
  id     String @id @default(uuid())
  method String
  status String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ContactMessage {
  id      String @id @default(uuid())
  userId  String
  user    User   @relation("UserToContactMessage", fields: [userId], references: [id], onDelete: Cascade)
  email   String
  subject String
  message String
  status  String @default("unread")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
